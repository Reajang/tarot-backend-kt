server:
  servlet:
    context-path: /api
  error:
    include-message: always
    include-binding-errors: always

spring:
  webflux:
    base-path: /api
  main:
    web-application-type: reactive
  application:
    name: Tarot soothsayer
#  datasource:
#    driver-class-name: org.postgresql.Driver
#    url: jdbc:postgresql://localhost:5432/tarot
#    username: postgres
#    password: postgres
#  flyway:
#    url: jdbc:mongodb://localhost:27017/tarot
#    schemas: public
#    user: root
#    password: mongopw
#    sql-migration-suffixes: ['.js']
#    enabled: true
#    driver-class-name:
  kafka:
    bootstrap-servers: localhost:9093
    producer:
      client-id: tarot-service
      #      transaction-id-prefix: tarot-${hostname:localhost}
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      group-id: tarot-group-1
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring:
          json:
            trusted:
              packages: '*'
        session:
          timeout:
            ms: 30000
      isolation-level: read_committed
      max-poll-records: 10
    listener:
      concurrency: 1
  data:
    mongodb:
      host: localhost
      port: 27017
      database: tarot
      username: root
      password: mongopw
      authentication-database: admin
      uuid-representation:  standard

mongock:
  enabled: true
  migration-scan-package:
    - com.example.backend.dbmigration


kafka:
  prefix: tarot
  topic:
    tarot-events: ${kafka.prefix}_tarot_events
    job-events: ${kafka.prefix}_job_events

gpt:
  api:
#    url: https://api.openai.com/v1/completions
    url: https://api.openai.com/v1/chat/completions
#    model: gpt-3.5-turbo
    model: gpt-4
#    model: text-davinci-003
    max_tokens: 4000
    temperature: 1.0
    auth:
      type: Bearer
      bearer:

yandex:
  api:
    translate:
      url: https://translate.api.cloud.yandex.net/translate/v2/translate
      auth:
        type: Api-Key
        apikey:

recreate:
  migration:
    re-init: false
    sql-to-json: false
