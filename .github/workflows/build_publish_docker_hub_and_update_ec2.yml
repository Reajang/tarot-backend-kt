name: Publish Docker image release version and Deploy to Amazon ECS

on:
  release:
    types: [ published ]

jobs:
  build_test_package:
    name: Build, test and upload artifact
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Run chmod to make gradlew executable
        run: chmod +x ./gradlew

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1.0.6

      - name: Build and test with Gradle
        uses: gradle/gradle-build-action@v2.4.2
        with:
          arguments: build test

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: tarot-backend-artifact
          path: build/libs
          retention-days: 1

  push_to_docker_hub:
    name: Push Docker image to Docker Hub
    needs: build_test_package
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4.4.0
        with:
          images: leonidgarin/astana-backend

      - name: Download tarot-backend-artifact
        uses: actions/download-artifact@v3
        with:
          name: tarot-backend-artifact
          path: build/libs

      - name: Build and push Docker image
        uses: docker/build-push-action@v4.0.0
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
#          github.ref_name is release tag
          tags: leonidgarin/tarot-backend:latest, leonidgarin/tarot-backend:${{ github.ref_name }}

  deploy:
    name: Deploy
    needs: push_to_docker_hub
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Run docker compose on EC2 via ssh
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_UBUNTU_USER }}
          key: ${{ secrets.AWS_LOCAL_PK }}
          script: |
            sudo docker-compose stop backend
            sudo docker-compose rm -f backend
            sudo docker-compose pull backend
            sudo docker-compose up --build -d backend
            sudo docker system prune -a -f
